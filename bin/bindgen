#!/usr/bin/env python3
"""This script generates Vulkan bindings for Rust.

It depends on the Vulkan XML registry. Due to the Python dependency,
and to save compile time, bindings are generated ahead in advance and
committed rather than being regenerated on each compilation.
"""
import argparse
import dataclasses
import itertools
import os
import re
import xml.etree.ElementTree as etree
from textwrap import dedent

import jinja2
from registry import Name, Registry


def strip_prefix(prefix, string):
    assert string[:len(prefix)] == prefix
    return string[len(prefix):]


TITLE_WORDS_REGEX = re.compile(
    r'(?<=[a-z])(?=[A-Z0-9])|' +
    r'(?<=[A-Z])(?=[0-9])|' +
    r'(?<=[A-Z])(?=[A-Z][a-z])|' +
    r'(?<=[0-9])(?=[A-Z][a-z])|' +
    r'(?<=[0-9])(?=[A-Z]{2,}$)'
)

def camel_to_snake(ident):
    return TITLE_WORDS_REGEX.sub('_', ident).lower()


class Renderer:
    def __init__(self, **kwargs):
        self.namespace_data = kwargs.get('namespace_data', True)
        self.namespace_pfn = kwargs.get('namespace_pfn', True)


    def indent(self, lines, count=1):
        return (count * self.indent_str + line for line in lines)


    def render_data(self, ident):
        if self.namespace_data:
            return f'crate::data::{ident}'
        else:
            return ident


    def render_pfn(self, ident):
        if self.namespace_pfn:
            return f'crate::pfn::{ident}'
        else:
            return ident


    BUILTIN_MAP = {
        'void': 'c_void',
        'char': 'c_char',
        'int': 'c_int',
        'float': 'c_float',
        'double': 'c_double',
        'uint8_t': 'u8',
        'uint16_t': 'u16',
        'uint32_t': 'u32',
        'uint64_t': 'u64',
        'int32_t': 'i32',
        'int64_t': 'i64',
        'size_t': 'usize',
    }

    def render_type_expr_base(self, name):
        if name.namespace == 'PFN_vk':
            return self.render_pfn(name.base)
        elif name.namespace == 'Vk':
            return self.render_data(name.base)
        else:
            return self.BUILTIN_MAP.get(name.base, name.base)


    def render_quals(self, quals):
        quals = list(reversed(quals))
        res = []
        idx = 0
        while idx < len(quals):
            idx += 1
            if quals[idx - 1] != '*':
                continue
            if idx < len(quals) and quals[idx] == 'const':
                idx += 1
                res.append('*const')
            else:
                res.append('*mut')
        return res


    def render_type_expr(self, expr):
        quals = self.render_quals(expr.qualifiers)
        base = self.render_type_expr_base(expr.base)
        basic = ' '.join(itertools.chain(quals, [base]))
        if expr.len is not None:
            return f'[{basic}; {expr.len}]'
        else:
            return basic


    KEYWORD_MAP = {
        'type': 'ty',
    }

    def render_var(self, name):
        return camel_to_snake(self.KEYWORD_MAP.get(name, name))


    def render_decl(self, decl):
        name = self.render_var(decl.name)
        ty = self.render_type_expr(decl.ty)
        return f'{name}: {ty}'


    def render_func(self, func):
        if any(arg.name is None for arg in func.args):
            assert len(func.args) == 1
            assert func.args[0].ty.base.base == 'void'
            args = ()
        else:
            args = (self.render_decl(arg) for arg in func.args)

        ret_ty = self.render_type_expr(func.ret)
        ret = '' if ret_ty == 'c_void' else ' -> ' + ret_ty

        return {'name': func.name.base, 'args': args, 'ret': ret}


    def render_aggregate(self, agg):
        def default(mem):
            if mem.values and mem.name == 'sType':
                s_type = strip_prefix('VK_STRUCTURE_TYPE_', mem.values[0])
                enum = self.render_type_expr_base(Name('Vk', 'StructureType'))
                return f' = {enum}::{s_type}'
            else:
                return ''

        members = (
            {
                'decl': self.render_decl(member),
                'default': default(member)
            }
            for member in agg.members
        )
        return {'name': agg.name.base, 'ty': agg.ty, 'members': members}


class BindingsVisitor:
    TEMPLATE = dedent("""\
        impl_enums! {
          {% for enum in bindings.enums %}
            {{enum['ty']}} {{enum['name']}} {
              {% for member in enum['members'] %}
                {{member['name']}} = {{member['value']}},
              {% endfor %}
            };
          {% endfor %}
        }

        impl_aliases! {
          {% for alias in bindings.aliases %}
            {{alias['name']}} = {{alias['target']}};
          {% endfor %}
        }

        impl_handles! {
          {% for handle in bindings.handles %}
            {{handle['name']}} { dispatchable: {{handle['disp']|lower}} };
          {% endfor %}
        }

        impl_func_pointers! {
          {% for func in bindings.func_pointers %}
            {{func['name']}}(
              {% for arg in func['args'] %}
                {{arg}},
              {% endfor %}
            ){{func['ret']}};
          {% endfor %}
        }

        impl_aggregates! {
          {% for agg in bindings.aggregates %}
            {{agg['ty']}} {{agg['name']}} {
              {% for member in agg['members'] %}
                {{member['decl']}}{{member['default']}},
              {% endfor %}
            };
          {% endfor %}
        }

        impl_commands! {
          {% for func in bindings.commands %}
            {{func['name']}}(
              {% for arg in func['args'] %}
                {{arg}},
              {% endfor %}
            ){{func['ret']}};
          {% endfor %}
        }

        impl_extensions! {
          {% for ext in bindings.extensions %}
            {{ext['name']}} = {{ext['value']}};
          {% endfor %}
        }

        impl_externs! {
          {% for extern in bindings.externs %}
            {{extern}},
          {% endfor %}
        }
    """)


    AVAILABLE_HEADERS = [
        'X11/Xlib.h',
        'X11/extensions/Xrandr.h',
    ]


    def __init__(self):
        self.enums = []
        self.externs = []
        self.aliases = []
        self.handles = []
        self.func_pointers = []
        self.aggregates = []
        self.commands = []
        self.extensions = []

        self.renderer = Renderer()
        # If a type depends on an external header, remember it here
        self.excised = set()

        self.env = jinja2.Environment(
            loader=jinja2.DictLoader({'bindings.rs': self.TEMPLATE}),
            undefined=jinja2.StrictUndefined,
            trim_blocks=True,
            lstrip_blocks=True,
        )


    def command_is_excised(self, command):
        return any(arg.ty.base.base in self.excised for arg in command.args)


    def visit(self, reg):
        for extern in reg.externs:
            self.visit_extern(extern)
        for enum in reg.enums:
            self.visit_enum(enum)
        for ty in reg.types:
            self.visit_type(ty)
        for command in reg.commands:
            self.visit_command(command)
        for extension in reg.extensions:
            self.visit_extension(extension)


    def visit_extern(self, extern):
        if not extern.header:
            self.externs.append(extern.name)
        elif extern.header not in self.AVAILABLE_HEADERS:
            self.excised.add(extern.name)


    def visit_extension(self, extension):
        name = strip_prefix('VK_', extension.name).upper() + '_EXTENSION_NAME'
        self.extensions.append({'name': name, 'value': extension.name})


    def visit_enum(self, enum):
        assert enum.ty in ('bitmask', 'enum')

        def ensure_valid(ident):
            if ident[0] in '0123456789':
                return f'_{ident}'
            return ident

        members = [
            {
                'name': ensure_valid(member.name.base),
                'value': str(member.value),
            }
            for member in enum.members
        ]

        self.enums.append({
            'name': enum.name.base,
            'ty': enum.ty,
            'members': members,
        })


    def visit_command(self, command):
        if self.command_is_excised(command):
            # Depends on an external header
            return
        self.commands.append(self.renderer.render_func(command))


    def visit_type(self, ty):
        category = ty.category()
        if category == 'type_alias':
            self.visit_alias(ty)
        elif category == 'handle':
            self.visit_handle(ty)
        elif category == 'func_pointer':
            self.func_pointers.append(self.renderer.render_func(ty))
        elif category == 'aggregate':
            self.visit_aggregate(ty)
        else:
            raise ValueError(f'unexpected category: {category}')


    def visit_alias(self, alias):
        ty = self.renderer.render_type_expr_base(alias.target)
        self.aliases.append({'name': alias.name.base, 'target': ty})


    def visit_handle(self, handle):
        self.handles.append({
            'name': handle.name.base,
            'disp': handle.dispatchable,
        })


    def visit_aggregate(self, agg):
        assert agg.ty in ('struct', 'union')

        if any(mem.ty.base.base in self.excised for mem in agg.members):
            # Depends on an external header
            self.excised.add(agg.name.base)
            return

        self.aggregates.append(self.renderer.render_aggregate(agg))


    def render(self, out):
        template = self.env.get_template('bindings.rs')
        out.writelines(template.generate(bindings=self))


class Api:
    TEMPLATE = dedent("""\
        impl_table! {
            name: {{api.name}},
            get_proc_addr: {{api.get_proc_addr}},
            handle: {
                name: {{api.handle}},
                type: {{api.level}},
            },
            members: [
              {% for member in api.members %}
                {
                    name: pfn_{{member['method']}},
                    method_name: {{member['method']}},
                    ptr: {{member['ptr']}},
                    signature: (
                      {% for arg in member['signature']['args'] %}
                        {{arg}},
                      {% endfor %}
                    ){{member['signature']['ret']}},
                    takes_handle: {{member['takes_handle']|lower}},
                },
              {% endfor %}
            ],
        }


    """)

    def __init__(self, registry, bindings, level):
        self.registry = registry
        self.bindings = bindings
        self.level = level
        self.renderer = Renderer(namespace_data=False)

        self.env = jinja2.Environment(
            loader=jinja2.DictLoader({'loader.rs': self.TEMPLATE}),
            undefined=jinja2.StrictUndefined,
            trim_blocks=True,
            lstrip_blocks=True,
        )

    @property
    def members(self):
        handle_level = {
            ty.name.base: ty.level
            for ty in self.registry.types
            if ty.category() == 'handle'
        }

        for command in self.registry.commands:
            if self.bindings.command_is_excised(command):
                continue

            obj = command.args[0].ty.base.base
            obj_level = handle_level.get(obj)
            if obj_level != self.level:
                continue

            takes_handle = obj == self.level
            method_name = camel_to_snake(command.name.base)

            args = command.args[1:] if takes_handle else command.args
            func = dataclasses.replace(command, args=args)
            sig = self.renderer.render_func(func)

            yield {
                'method': method_name,
                'ptr': command.name.base,
                'takes_handle': str(takes_handle).lower(),
                'signature': sig,
            }

    @property
    def name(self):
        return f'{self.level}Table'

    @property
    def get_proc_addr(self):
        return f'Get{self.level}ProcAddr'

    @property
    def handle(self):
        return self.level.lower()

    def render(self, out):
        template = self.env.get_template('loader.rs')
        out.writelines(template.generate(api=self))


def render_loader(registry, bindings, out):
    for level in ('Instance', 'Device'):
        Api(registry, bindings, level).render(out)


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-i', '--input', help='Path to vk.xml.')
    parser.add_argument('-o', '--output',
        help='Output directory for generated sources')
    args = parser.parse_args()

    root = etree.parse(args.input).getroot()

    registry = Registry()
    registry.parse_registry(root)

    bindings = BindingsVisitor()
    bindings.visit(registry)
    bindings_file = os.path.join(args.output, 'bindings.rs')
    with open(bindings_file, 'w') as f:
        bindings.render(f)

    loader_file = os.path.join(args.output, 'loader.rs')
    with open(loader_file, 'w') as f:
        render_loader(registry, bindings, f)


if __name__ == '__main__':
    main()
