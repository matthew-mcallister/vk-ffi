impl_table! {
    name: InstanceTable,
    get_proc_addr: GetInstanceProcAddr,
    handle: {
        name: instance,
        type: Instance,
    },
    members: [
        {
            name: pfn_destroy_instance,
            method_name: destroy_instance,
            ptr: DestroyInstance,
            signature: (
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_enumerate_physical_devices,
            method_name: enumerate_physical_devices,
            ptr: EnumeratePhysicalDevices,
            signature: (
                p_physical_device_count: *mut u32,
                p_physical_devices: *mut PhysicalDevice,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_instance_proc_addr,
            method_name: get_instance_proc_addr,
            ptr: GetInstanceProcAddr,
            signature: (
                p_name: *const c_char,
            ) -> crate::pfn::VoidFunction,
            takes_handle: true,
        },
        {
            name: pfn_get_physical_device_properties,
            method_name: get_physical_device_properties,
            ptr: GetPhysicalDeviceProperties,
            signature: (
                physical_device: PhysicalDevice,
                p_properties: *mut PhysicalDeviceProperties,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_queue_family_properties,
            method_name: get_physical_device_queue_family_properties,
            ptr: GetPhysicalDeviceQueueFamilyProperties,
            signature: (
                physical_device: PhysicalDevice,
                p_queue_family_property_count: *mut u32,
                p_queue_family_properties: *mut QueueFamilyProperties,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_memory_properties,
            method_name: get_physical_device_memory_properties,
            ptr: GetPhysicalDeviceMemoryProperties,
            signature: (
                physical_device: PhysicalDevice,
                p_memory_properties: *mut PhysicalDeviceMemoryProperties,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_features,
            method_name: get_physical_device_features,
            ptr: GetPhysicalDeviceFeatures,
            signature: (
                physical_device: PhysicalDevice,
                p_features: *mut PhysicalDeviceFeatures,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_format_properties,
            method_name: get_physical_device_format_properties,
            ptr: GetPhysicalDeviceFormatProperties,
            signature: (
                physical_device: PhysicalDevice,
                format: Format,
                p_format_properties: *mut FormatProperties,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_image_format_properties,
            method_name: get_physical_device_image_format_properties,
            ptr: GetPhysicalDeviceImageFormatProperties,
            signature: (
                physical_device: PhysicalDevice,
                format: Format,
                ty: ImageType,
                tiling: ImageTiling,
                usage: ImageUsageFlags,
                flags: ImageCreateFlags,
                p_image_format_properties: *mut ImageFormatProperties,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_create_device,
            method_name: create_device,
            ptr: CreateDevice,
            signature: (
                physical_device: PhysicalDevice,
                p_create_info: *const DeviceCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_device: *mut Device,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_enumerate_device_layer_properties,
            method_name: enumerate_device_layer_properties,
            ptr: EnumerateDeviceLayerProperties,
            signature: (
                physical_device: PhysicalDevice,
                p_property_count: *mut u32,
                p_properties: *mut LayerProperties,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_enumerate_device_extension_properties,
            method_name: enumerate_device_extension_properties,
            ptr: EnumerateDeviceExtensionProperties,
            signature: (
                physical_device: PhysicalDevice,
                p_layer_name: *const c_char,
                p_property_count: *mut u32,
                p_properties: *mut ExtensionProperties,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_sparse_image_format_properties,
            method_name: get_physical_device_sparse_image_format_properties,
            ptr: GetPhysicalDeviceSparseImageFormatProperties,
            signature: (
                physical_device: PhysicalDevice,
                format: Format,
                ty: ImageType,
                samples: SampleCountFlagBits,
                usage: ImageUsageFlags,
                tiling: ImageTiling,
                p_property_count: *mut u32,
                p_properties: *mut SparseImageFormatProperties,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_display_properties_khr,
            method_name: get_physical_device_display_properties_khr,
            ptr: GetPhysicalDeviceDisplayPropertiesKHR,
            signature: (
                physical_device: PhysicalDevice,
                p_property_count: *mut u32,
                p_properties: *mut DisplayPropertiesKHR,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_display_plane_properties_khr,
            method_name: get_physical_device_display_plane_properties_khr,
            ptr: GetPhysicalDeviceDisplayPlanePropertiesKHR,
            signature: (
                physical_device: PhysicalDevice,
                p_property_count: *mut u32,
                p_properties: *mut DisplayPlanePropertiesKHR,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_display_plane_supported_displays_khr,
            method_name: get_display_plane_supported_displays_khr,
            ptr: GetDisplayPlaneSupportedDisplaysKHR,
            signature: (
                physical_device: PhysicalDevice,
                plane_index: u32,
                p_display_count: *mut u32,
                p_displays: *mut DisplayKHR,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_display_mode_properties_khr,
            method_name: get_display_mode_properties_khr,
            ptr: GetDisplayModePropertiesKHR,
            signature: (
                physical_device: PhysicalDevice,
                display: DisplayKHR,
                p_property_count: *mut u32,
                p_properties: *mut DisplayModePropertiesKHR,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_create_display_mode_khr,
            method_name: create_display_mode_khr,
            ptr: CreateDisplayModeKHR,
            signature: (
                physical_device: PhysicalDevice,
                display: DisplayKHR,
                p_create_info: *const DisplayModeCreateInfoKHR,
                p_allocator: *const AllocationCallbacks,
                p_mode: *mut DisplayModeKHR,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_display_plane_capabilities_khr,
            method_name: get_display_plane_capabilities_khr,
            ptr: GetDisplayPlaneCapabilitiesKHR,
            signature: (
                physical_device: PhysicalDevice,
                mode: DisplayModeKHR,
                plane_index: u32,
                p_capabilities: *mut DisplayPlaneCapabilitiesKHR,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_create_display_plane_surface_khr,
            method_name: create_display_plane_surface_khr,
            ptr: CreateDisplayPlaneSurfaceKHR,
            signature: (
                p_create_info: *const DisplaySurfaceCreateInfoKHR,
                p_allocator: *const AllocationCallbacks,
                p_surface: *mut SurfaceKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_surface_khr,
            method_name: destroy_surface_khr,
            ptr: DestroySurfaceKHR,
            signature: (
                surface: SurfaceKHR,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_physical_device_surface_support_khr,
            method_name: get_physical_device_surface_support_khr,
            ptr: GetPhysicalDeviceSurfaceSupportKHR,
            signature: (
                physical_device: PhysicalDevice,
                queue_family_index: u32,
                surface: SurfaceKHR,
                p_supported: *mut Bool32,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_surface_capabilities_khr,
            method_name: get_physical_device_surface_capabilities_khr,
            ptr: GetPhysicalDeviceSurfaceCapabilitiesKHR,
            signature: (
                physical_device: PhysicalDevice,
                surface: SurfaceKHR,
                p_surface_capabilities: *mut SurfaceCapabilitiesKHR,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_surface_formats_khr,
            method_name: get_physical_device_surface_formats_khr,
            ptr: GetPhysicalDeviceSurfaceFormatsKHR,
            signature: (
                physical_device: PhysicalDevice,
                surface: SurfaceKHR,
                p_surface_format_count: *mut u32,
                p_surface_formats: *mut SurfaceFormatKHR,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_surface_present_modes_khr,
            method_name: get_physical_device_surface_present_modes_khr,
            ptr: GetPhysicalDeviceSurfacePresentModesKHR,
            signature: (
                physical_device: PhysicalDevice,
                surface: SurfaceKHR,
                p_present_mode_count: *mut u32,
                p_present_modes: *mut PresentModeKHR,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_create_vi_surface_nn,
            method_name: create_vi_surface_nn,
            ptr: CreateViSurfaceNN,
            signature: (
                p_create_info: *const ViSurfaceCreateInfoNN,
                p_allocator: *const AllocationCallbacks,
                p_surface: *mut SurfaceKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_physical_device_win_32_presentation_support_khr,
            method_name: get_physical_device_win_32_presentation_support_khr,
            ptr: GetPhysicalDeviceWin32PresentationSupportKHR,
            signature: (
                physical_device: PhysicalDevice,
                queue_family_index: u32,
            ) -> Bool32,
            takes_handle: false,
        },
        {
            name: pfn_create_debug_report_callback_ext,
            method_name: create_debug_report_callback_ext,
            ptr: CreateDebugReportCallbackEXT,
            signature: (
                p_create_info: *const DebugReportCallbackCreateInfoEXT,
                p_allocator: *const AllocationCallbacks,
                p_callback: *mut DebugReportCallbackEXT,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_debug_report_callback_ext,
            method_name: destroy_debug_report_callback_ext,
            ptr: DestroyDebugReportCallbackEXT,
            signature: (
                callback: DebugReportCallbackEXT,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_debug_report_message_ext,
            method_name: debug_report_message_ext,
            ptr: DebugReportMessageEXT,
            signature: (
                flags: DebugReportFlagsEXT,
                object_type: DebugReportObjectTypeEXT,
                object: u64,
                location: usize,
                message_code: i32,
                p_layer_prefix: *const c_char,
                p_message: *const c_char,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_physical_device_external_image_format_properties_nv,
            method_name: get_physical_device_external_image_format_properties_nv,
            ptr: GetPhysicalDeviceExternalImageFormatPropertiesNV,
            signature: (
                physical_device: PhysicalDevice,
                format: Format,
                ty: ImageType,
                tiling: ImageTiling,
                usage: ImageUsageFlags,
                flags: ImageCreateFlags,
                external_handle_type: ExternalMemoryHandleTypeFlagsNV,
                p_external_image_format_properties: *mut ExternalImageFormatPropertiesNV,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_generated_commands_properties_nvx,
            method_name: get_physical_device_generated_commands_properties_nvx,
            ptr: GetPhysicalDeviceGeneratedCommandsPropertiesNVX,
            signature: (
                physical_device: PhysicalDevice,
                p_features: *mut DeviceGeneratedCommandsFeaturesNVX,
                p_limits: *mut DeviceGeneratedCommandsLimitsNVX,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_features_2,
            method_name: get_physical_device_features_2,
            ptr: GetPhysicalDeviceFeatures2,
            signature: (
                physical_device: PhysicalDevice,
                p_features: *mut PhysicalDeviceFeatures2,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_properties_2,
            method_name: get_physical_device_properties_2,
            ptr: GetPhysicalDeviceProperties2,
            signature: (
                physical_device: PhysicalDevice,
                p_properties: *mut PhysicalDeviceProperties2,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_format_properties_2,
            method_name: get_physical_device_format_properties_2,
            ptr: GetPhysicalDeviceFormatProperties2,
            signature: (
                physical_device: PhysicalDevice,
                format: Format,
                p_format_properties: *mut FormatProperties2,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_image_format_properties_2,
            method_name: get_physical_device_image_format_properties_2,
            ptr: GetPhysicalDeviceImageFormatProperties2,
            signature: (
                physical_device: PhysicalDevice,
                p_image_format_info: *const PhysicalDeviceImageFormatInfo2,
                p_image_format_properties: *mut ImageFormatProperties2,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_queue_family_properties_2,
            method_name: get_physical_device_queue_family_properties_2,
            ptr: GetPhysicalDeviceQueueFamilyProperties2,
            signature: (
                physical_device: PhysicalDevice,
                p_queue_family_property_count: *mut u32,
                p_queue_family_properties: *mut QueueFamilyProperties2,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_memory_properties_2,
            method_name: get_physical_device_memory_properties_2,
            ptr: GetPhysicalDeviceMemoryProperties2,
            signature: (
                physical_device: PhysicalDevice,
                p_memory_properties: *mut PhysicalDeviceMemoryProperties2,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_sparse_image_format_properties_2,
            method_name: get_physical_device_sparse_image_format_properties_2,
            ptr: GetPhysicalDeviceSparseImageFormatProperties2,
            signature: (
                physical_device: PhysicalDevice,
                p_format_info: *const PhysicalDeviceSparseImageFormatInfo2,
                p_property_count: *mut u32,
                p_properties: *mut SparseImageFormatProperties2,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_external_buffer_properties,
            method_name: get_physical_device_external_buffer_properties,
            ptr: GetPhysicalDeviceExternalBufferProperties,
            signature: (
                physical_device: PhysicalDevice,
                p_external_buffer_info: *const PhysicalDeviceExternalBufferInfo,
                p_external_buffer_properties: *mut ExternalBufferProperties,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_external_semaphore_properties,
            method_name: get_physical_device_external_semaphore_properties,
            ptr: GetPhysicalDeviceExternalSemaphoreProperties,
            signature: (
                physical_device: PhysicalDevice,
                p_external_semaphore_info: *const PhysicalDeviceExternalSemaphoreInfo,
                p_external_semaphore_properties: *mut ExternalSemaphoreProperties,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_external_fence_properties,
            method_name: get_physical_device_external_fence_properties,
            ptr: GetPhysicalDeviceExternalFenceProperties,
            signature: (
                physical_device: PhysicalDevice,
                p_external_fence_info: *const PhysicalDeviceExternalFenceInfo,
                p_external_fence_properties: *mut ExternalFenceProperties,
            ),
            takes_handle: false,
        },
        {
            name: pfn_release_display_ext,
            method_name: release_display_ext,
            ptr: ReleaseDisplayEXT,
            signature: (
                physical_device: PhysicalDevice,
                display: DisplayKHR,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_surface_capabilities_2_ext,
            method_name: get_physical_device_surface_capabilities_2_ext,
            ptr: GetPhysicalDeviceSurfaceCapabilities2EXT,
            signature: (
                physical_device: PhysicalDevice,
                surface: SurfaceKHR,
                p_surface_capabilities: *mut SurfaceCapabilities2EXT,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_enumerate_physical_device_groups,
            method_name: enumerate_physical_device_groups,
            ptr: EnumeratePhysicalDeviceGroups,
            signature: (
                p_physical_device_group_count: *mut u32,
                p_physical_device_group_properties: *mut PhysicalDeviceGroupProperties,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_physical_device_present_rectangles_khr,
            method_name: get_physical_device_present_rectangles_khr,
            ptr: GetPhysicalDevicePresentRectanglesKHR,
            signature: (
                physical_device: PhysicalDevice,
                surface: SurfaceKHR,
                p_rect_count: *mut u32,
                p_rects: *mut Rect2D,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_create_ios_surface_mvk,
            method_name: create_ios_surface_mvk,
            ptr: CreateIOSSurfaceMVK,
            signature: (
                p_create_info: *const IOSSurfaceCreateInfoMVK,
                p_allocator: *const AllocationCallbacks,
                p_surface: *mut SurfaceKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_create_mac_os_surface_mvk,
            method_name: create_mac_os_surface_mvk,
            ptr: CreateMacOSSurfaceMVK,
            signature: (
                p_create_info: *const MacOSSurfaceCreateInfoMVK,
                p_allocator: *const AllocationCallbacks,
                p_surface: *mut SurfaceKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_physical_device_multisample_properties_ext,
            method_name: get_physical_device_multisample_properties_ext,
            ptr: GetPhysicalDeviceMultisamplePropertiesEXT,
            signature: (
                physical_device: PhysicalDevice,
                samples: SampleCountFlagBits,
                p_multisample_properties: *mut MultisamplePropertiesEXT,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_surface_capabilities_2_khr,
            method_name: get_physical_device_surface_capabilities_2_khr,
            ptr: GetPhysicalDeviceSurfaceCapabilities2KHR,
            signature: (
                physical_device: PhysicalDevice,
                p_surface_info: *const PhysicalDeviceSurfaceInfo2KHR,
                p_surface_capabilities: *mut SurfaceCapabilities2KHR,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_surface_formats_2_khr,
            method_name: get_physical_device_surface_formats_2_khr,
            ptr: GetPhysicalDeviceSurfaceFormats2KHR,
            signature: (
                physical_device: PhysicalDevice,
                p_surface_info: *const PhysicalDeviceSurfaceInfo2KHR,
                p_surface_format_count: *mut u32,
                p_surface_formats: *mut SurfaceFormat2KHR,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_display_properties_2_khr,
            method_name: get_physical_device_display_properties_2_khr,
            ptr: GetPhysicalDeviceDisplayProperties2KHR,
            signature: (
                physical_device: PhysicalDevice,
                p_property_count: *mut u32,
                p_properties: *mut DisplayProperties2KHR,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_display_plane_properties_2_khr,
            method_name: get_physical_device_display_plane_properties_2_khr,
            ptr: GetPhysicalDeviceDisplayPlaneProperties2KHR,
            signature: (
                physical_device: PhysicalDevice,
                p_property_count: *mut u32,
                p_properties: *mut DisplayPlaneProperties2KHR,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_display_mode_properties_2_khr,
            method_name: get_display_mode_properties_2_khr,
            ptr: GetDisplayModeProperties2KHR,
            signature: (
                physical_device: PhysicalDevice,
                display: DisplayKHR,
                p_property_count: *mut u32,
                p_properties: *mut DisplayModeProperties2KHR,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_display_plane_capabilities_2_khr,
            method_name: get_display_plane_capabilities_2_khr,
            ptr: GetDisplayPlaneCapabilities2KHR,
            signature: (
                physical_device: PhysicalDevice,
                p_display_plane_info: *const DisplayPlaneInfo2KHR,
                p_capabilities: *mut DisplayPlaneCapabilities2KHR,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_calibrateable_time_domains_ext,
            method_name: get_physical_device_calibrateable_time_domains_ext,
            ptr: GetPhysicalDeviceCalibrateableTimeDomainsEXT,
            signature: (
                physical_device: PhysicalDevice,
                p_time_domain_count: *mut u32,
                p_time_domains: *mut TimeDomainEXT,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_create_debug_utils_messenger_ext,
            method_name: create_debug_utils_messenger_ext,
            ptr: CreateDebugUtilsMessengerEXT,
            signature: (
                p_create_info: *const DebugUtilsMessengerCreateInfoEXT,
                p_allocator: *const AllocationCallbacks,
                p_messenger: *mut DebugUtilsMessengerEXT,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_debug_utils_messenger_ext,
            method_name: destroy_debug_utils_messenger_ext,
            ptr: DestroyDebugUtilsMessengerEXT,
            signature: (
                messenger: DebugUtilsMessengerEXT,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_submit_debug_utils_message_ext,
            method_name: submit_debug_utils_message_ext,
            ptr: SubmitDebugUtilsMessageEXT,
            signature: (
                message_severity: DebugUtilsMessageSeverityFlagBitsEXT,
                message_types: DebugUtilsMessageTypeFlagsEXT,
                p_callback_data: *const DebugUtilsMessengerCallbackDataEXT,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_physical_device_cooperative_matrix_properties_nv,
            method_name: get_physical_device_cooperative_matrix_properties_nv,
            ptr: GetPhysicalDeviceCooperativeMatrixPropertiesNV,
            signature: (
                physical_device: PhysicalDevice,
                p_property_count: *mut u32,
                p_properties: *mut CooperativeMatrixPropertiesNV,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_surface_present_modes_2_ext,
            method_name: get_physical_device_surface_present_modes_2_ext,
            ptr: GetPhysicalDeviceSurfacePresentModes2EXT,
            signature: (
                physical_device: PhysicalDevice,
                p_surface_info: *const PhysicalDeviceSurfaceInfo2KHR,
                p_present_mode_count: *mut u32,
                p_present_modes: *mut PresentModeKHR,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_enumerate_physical_device_queue_family_performance_query_counters_khr,
            method_name: enumerate_physical_device_queue_family_performance_query_counters_khr,
            ptr: EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR,
            signature: (
                physical_device: PhysicalDevice,
                queue_family_index: u32,
                p_counter_count: *mut u32,
                p_counters: *mut PerformanceCounterKHR,
                p_counter_descriptions: *mut PerformanceCounterDescriptionKHR,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_queue_family_performance_query_passes_khr,
            method_name: get_physical_device_queue_family_performance_query_passes_khr,
            ptr: GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR,
            signature: (
                physical_device: PhysicalDevice,
                p_performance_query_create_info: *const QueryPoolPerformanceCreateInfoKHR,
                p_num_passes: *mut u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_create_headless_surface_ext,
            method_name: create_headless_surface_ext,
            ptr: CreateHeadlessSurfaceEXT,
            signature: (
                p_create_info: *const HeadlessSurfaceCreateInfoEXT,
                p_allocator: *const AllocationCallbacks,
                p_surface: *mut SurfaceKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_physical_device_supported_framebuffer_mixed_samples_combinations_nv,
            method_name: get_physical_device_supported_framebuffer_mixed_samples_combinations_nv,
            ptr: GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV,
            signature: (
                physical_device: PhysicalDevice,
                p_combination_count: *mut u32,
                p_combinations: *mut FramebufferMixedSamplesCombinationNV,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_physical_device_tool_properties_ext,
            method_name: get_physical_device_tool_properties_ext,
            ptr: GetPhysicalDeviceToolPropertiesEXT,
            signature: (
                physical_device: PhysicalDevice,
                p_tool_count: *mut u32,
                p_tool_properties: *mut PhysicalDeviceToolPropertiesEXT,
            ) -> Result,
            takes_handle: false,
        },
    ],
}

impl_table! {
    name: DeviceTable,
    get_proc_addr: GetDeviceProcAddr,
    handle: {
        name: device,
        type: Device,
    },
    members: [
        {
            name: pfn_get_device_proc_addr,
            method_name: get_device_proc_addr,
            ptr: GetDeviceProcAddr,
            signature: (
                p_name: *const c_char,
            ) -> crate::pfn::VoidFunction,
            takes_handle: true,
        },
        {
            name: pfn_destroy_device,
            method_name: destroy_device,
            ptr: DestroyDevice,
            signature: (
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_device_queue,
            method_name: get_device_queue,
            ptr: GetDeviceQueue,
            signature: (
                queue_family_index: u32,
                queue_index: u32,
                p_queue: *mut Queue,
            ),
            takes_handle: true,
        },
        {
            name: pfn_queue_submit,
            method_name: queue_submit,
            ptr: QueueSubmit,
            signature: (
                queue: Queue,
                submit_count: u32,
                p_submits: *const SubmitInfo,
                fence: Fence,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_queue_wait_idle,
            method_name: queue_wait_idle,
            ptr: QueueWaitIdle,
            signature: (
                queue: Queue,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_device_wait_idle,
            method_name: device_wait_idle,
            ptr: DeviceWaitIdle,
            signature: (
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_allocate_memory,
            method_name: allocate_memory,
            ptr: AllocateMemory,
            signature: (
                p_allocate_info: *const MemoryAllocateInfo,
                p_allocator: *const AllocationCallbacks,
                p_memory: *mut DeviceMemory,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_free_memory,
            method_name: free_memory,
            ptr: FreeMemory,
            signature: (
                memory: DeviceMemory,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_map_memory,
            method_name: map_memory,
            ptr: MapMemory,
            signature: (
                memory: DeviceMemory,
                offset: DeviceSize,
                size: DeviceSize,
                flags: MemoryMapFlags,
                pp_data: *mut *mut c_void,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_unmap_memory,
            method_name: unmap_memory,
            ptr: UnmapMemory,
            signature: (
                memory: DeviceMemory,
            ),
            takes_handle: true,
        },
        {
            name: pfn_flush_mapped_memory_ranges,
            method_name: flush_mapped_memory_ranges,
            ptr: FlushMappedMemoryRanges,
            signature: (
                memory_range_count: u32,
                p_memory_ranges: *const MappedMemoryRange,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_invalidate_mapped_memory_ranges,
            method_name: invalidate_mapped_memory_ranges,
            ptr: InvalidateMappedMemoryRanges,
            signature: (
                memory_range_count: u32,
                p_memory_ranges: *const MappedMemoryRange,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_device_memory_commitment,
            method_name: get_device_memory_commitment,
            ptr: GetDeviceMemoryCommitment,
            signature: (
                memory: DeviceMemory,
                p_committed_memory_in_bytes: *mut DeviceSize,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_buffer_memory_requirements,
            method_name: get_buffer_memory_requirements,
            ptr: GetBufferMemoryRequirements,
            signature: (
                buffer: Buffer,
                p_memory_requirements: *mut MemoryRequirements,
            ),
            takes_handle: true,
        },
        {
            name: pfn_bind_buffer_memory,
            method_name: bind_buffer_memory,
            ptr: BindBufferMemory,
            signature: (
                buffer: Buffer,
                memory: DeviceMemory,
                memory_offset: DeviceSize,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_image_memory_requirements,
            method_name: get_image_memory_requirements,
            ptr: GetImageMemoryRequirements,
            signature: (
                image: Image,
                p_memory_requirements: *mut MemoryRequirements,
            ),
            takes_handle: true,
        },
        {
            name: pfn_bind_image_memory,
            method_name: bind_image_memory,
            ptr: BindImageMemory,
            signature: (
                image: Image,
                memory: DeviceMemory,
                memory_offset: DeviceSize,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_image_sparse_memory_requirements,
            method_name: get_image_sparse_memory_requirements,
            ptr: GetImageSparseMemoryRequirements,
            signature: (
                image: Image,
                p_sparse_memory_requirement_count: *mut u32,
                p_sparse_memory_requirements: *mut SparseImageMemoryRequirements,
            ),
            takes_handle: true,
        },
        {
            name: pfn_queue_bind_sparse,
            method_name: queue_bind_sparse,
            ptr: QueueBindSparse,
            signature: (
                queue: Queue,
                bind_info_count: u32,
                p_bind_info: *const BindSparseInfo,
                fence: Fence,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_create_fence,
            method_name: create_fence,
            ptr: CreateFence,
            signature: (
                p_create_info: *const FenceCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_fence: *mut Fence,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_fence,
            method_name: destroy_fence,
            ptr: DestroyFence,
            signature: (
                fence: Fence,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_reset_fences,
            method_name: reset_fences,
            ptr: ResetFences,
            signature: (
                fence_count: u32,
                p_fences: *const Fence,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_fence_status,
            method_name: get_fence_status,
            ptr: GetFenceStatus,
            signature: (
                fence: Fence,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_wait_for_fences,
            method_name: wait_for_fences,
            ptr: WaitForFences,
            signature: (
                fence_count: u32,
                p_fences: *const Fence,
                wait_all: Bool32,
                timeout: u64,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_create_semaphore,
            method_name: create_semaphore,
            ptr: CreateSemaphore,
            signature: (
                p_create_info: *const SemaphoreCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_semaphore: *mut Semaphore,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_semaphore,
            method_name: destroy_semaphore,
            ptr: DestroySemaphore,
            signature: (
                semaphore: Semaphore,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_create_event,
            method_name: create_event,
            ptr: CreateEvent,
            signature: (
                p_create_info: *const EventCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_event: *mut Event,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_event,
            method_name: destroy_event,
            ptr: DestroyEvent,
            signature: (
                event: Event,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_event_status,
            method_name: get_event_status,
            ptr: GetEventStatus,
            signature: (
                event: Event,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_set_event,
            method_name: set_event,
            ptr: SetEvent,
            signature: (
                event: Event,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_reset_event,
            method_name: reset_event,
            ptr: ResetEvent,
            signature: (
                event: Event,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_create_query_pool,
            method_name: create_query_pool,
            ptr: CreateQueryPool,
            signature: (
                p_create_info: *const QueryPoolCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_query_pool: *mut QueryPool,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_query_pool,
            method_name: destroy_query_pool,
            ptr: DestroyQueryPool,
            signature: (
                query_pool: QueryPool,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_query_pool_results,
            method_name: get_query_pool_results,
            ptr: GetQueryPoolResults,
            signature: (
                query_pool: QueryPool,
                first_query: u32,
                query_count: u32,
                data_size: usize,
                p_data: *mut c_void,
                stride: DeviceSize,
                flags: QueryResultFlags,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_reset_query_pool,
            method_name: reset_query_pool,
            ptr: ResetQueryPool,
            signature: (
                query_pool: QueryPool,
                first_query: u32,
                query_count: u32,
            ),
            takes_handle: true,
        },
        {
            name: pfn_create_buffer,
            method_name: create_buffer,
            ptr: CreateBuffer,
            signature: (
                p_create_info: *const BufferCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_buffer: *mut Buffer,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_buffer,
            method_name: destroy_buffer,
            ptr: DestroyBuffer,
            signature: (
                buffer: Buffer,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_create_buffer_view,
            method_name: create_buffer_view,
            ptr: CreateBufferView,
            signature: (
                p_create_info: *const BufferViewCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_view: *mut BufferView,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_buffer_view,
            method_name: destroy_buffer_view,
            ptr: DestroyBufferView,
            signature: (
                buffer_view: BufferView,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_create_image,
            method_name: create_image,
            ptr: CreateImage,
            signature: (
                p_create_info: *const ImageCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_image: *mut Image,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_image,
            method_name: destroy_image,
            ptr: DestroyImage,
            signature: (
                image: Image,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_image_subresource_layout,
            method_name: get_image_subresource_layout,
            ptr: GetImageSubresourceLayout,
            signature: (
                image: Image,
                p_subresource: *const ImageSubresource,
                p_layout: *mut SubresourceLayout,
            ),
            takes_handle: true,
        },
        {
            name: pfn_create_image_view,
            method_name: create_image_view,
            ptr: CreateImageView,
            signature: (
                p_create_info: *const ImageViewCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_view: *mut ImageView,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_image_view,
            method_name: destroy_image_view,
            ptr: DestroyImageView,
            signature: (
                image_view: ImageView,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_create_shader_module,
            method_name: create_shader_module,
            ptr: CreateShaderModule,
            signature: (
                p_create_info: *const ShaderModuleCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_shader_module: *mut ShaderModule,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_shader_module,
            method_name: destroy_shader_module,
            ptr: DestroyShaderModule,
            signature: (
                shader_module: ShaderModule,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_create_pipeline_cache,
            method_name: create_pipeline_cache,
            ptr: CreatePipelineCache,
            signature: (
                p_create_info: *const PipelineCacheCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_pipeline_cache: *mut PipelineCache,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_pipeline_cache,
            method_name: destroy_pipeline_cache,
            ptr: DestroyPipelineCache,
            signature: (
                pipeline_cache: PipelineCache,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_pipeline_cache_data,
            method_name: get_pipeline_cache_data,
            ptr: GetPipelineCacheData,
            signature: (
                pipeline_cache: PipelineCache,
                p_data_size: *mut usize,
                p_data: *mut c_void,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_merge_pipeline_caches,
            method_name: merge_pipeline_caches,
            ptr: MergePipelineCaches,
            signature: (
                dst_cache: PipelineCache,
                src_cache_count: u32,
                p_src_caches: *const PipelineCache,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_create_graphics_pipelines,
            method_name: create_graphics_pipelines,
            ptr: CreateGraphicsPipelines,
            signature: (
                pipeline_cache: PipelineCache,
                create_info_count: u32,
                p_create_infos: *const GraphicsPipelineCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_pipelines: *mut Pipeline,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_create_compute_pipelines,
            method_name: create_compute_pipelines,
            ptr: CreateComputePipelines,
            signature: (
                pipeline_cache: PipelineCache,
                create_info_count: u32,
                p_create_infos: *const ComputePipelineCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_pipelines: *mut Pipeline,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_pipeline,
            method_name: destroy_pipeline,
            ptr: DestroyPipeline,
            signature: (
                pipeline: Pipeline,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_create_pipeline_layout,
            method_name: create_pipeline_layout,
            ptr: CreatePipelineLayout,
            signature: (
                p_create_info: *const PipelineLayoutCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_pipeline_layout: *mut PipelineLayout,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_pipeline_layout,
            method_name: destroy_pipeline_layout,
            ptr: DestroyPipelineLayout,
            signature: (
                pipeline_layout: PipelineLayout,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_create_sampler,
            method_name: create_sampler,
            ptr: CreateSampler,
            signature: (
                p_create_info: *const SamplerCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_sampler: *mut Sampler,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_sampler,
            method_name: destroy_sampler,
            ptr: DestroySampler,
            signature: (
                sampler: Sampler,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_create_descriptor_set_layout,
            method_name: create_descriptor_set_layout,
            ptr: CreateDescriptorSetLayout,
            signature: (
                p_create_info: *const DescriptorSetLayoutCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_set_layout: *mut DescriptorSetLayout,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_descriptor_set_layout,
            method_name: destroy_descriptor_set_layout,
            ptr: DestroyDescriptorSetLayout,
            signature: (
                descriptor_set_layout: DescriptorSetLayout,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_create_descriptor_pool,
            method_name: create_descriptor_pool,
            ptr: CreateDescriptorPool,
            signature: (
                p_create_info: *const DescriptorPoolCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_descriptor_pool: *mut DescriptorPool,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_descriptor_pool,
            method_name: destroy_descriptor_pool,
            ptr: DestroyDescriptorPool,
            signature: (
                descriptor_pool: DescriptorPool,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_reset_descriptor_pool,
            method_name: reset_descriptor_pool,
            ptr: ResetDescriptorPool,
            signature: (
                descriptor_pool: DescriptorPool,
                flags: DescriptorPoolResetFlags,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_allocate_descriptor_sets,
            method_name: allocate_descriptor_sets,
            ptr: AllocateDescriptorSets,
            signature: (
                p_allocate_info: *const DescriptorSetAllocateInfo,
                p_descriptor_sets: *mut DescriptorSet,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_free_descriptor_sets,
            method_name: free_descriptor_sets,
            ptr: FreeDescriptorSets,
            signature: (
                descriptor_pool: DescriptorPool,
                descriptor_set_count: u32,
                p_descriptor_sets: *const DescriptorSet,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_update_descriptor_sets,
            method_name: update_descriptor_sets,
            ptr: UpdateDescriptorSets,
            signature: (
                descriptor_write_count: u32,
                p_descriptor_writes: *const WriteDescriptorSet,
                descriptor_copy_count: u32,
                p_descriptor_copies: *const CopyDescriptorSet,
            ),
            takes_handle: true,
        },
        {
            name: pfn_create_framebuffer,
            method_name: create_framebuffer,
            ptr: CreateFramebuffer,
            signature: (
                p_create_info: *const FramebufferCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_framebuffer: *mut Framebuffer,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_framebuffer,
            method_name: destroy_framebuffer,
            ptr: DestroyFramebuffer,
            signature: (
                framebuffer: Framebuffer,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_create_render_pass,
            method_name: create_render_pass,
            ptr: CreateRenderPass,
            signature: (
                p_create_info: *const RenderPassCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_render_pass: *mut RenderPass,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_render_pass,
            method_name: destroy_render_pass,
            ptr: DestroyRenderPass,
            signature: (
                render_pass: RenderPass,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_render_area_granularity,
            method_name: get_render_area_granularity,
            ptr: GetRenderAreaGranularity,
            signature: (
                render_pass: RenderPass,
                p_granularity: *mut Extent2D,
            ),
            takes_handle: true,
        },
        {
            name: pfn_create_command_pool,
            method_name: create_command_pool,
            ptr: CreateCommandPool,
            signature: (
                p_create_info: *const CommandPoolCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_command_pool: *mut CommandPool,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_command_pool,
            method_name: destroy_command_pool,
            ptr: DestroyCommandPool,
            signature: (
                command_pool: CommandPool,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_reset_command_pool,
            method_name: reset_command_pool,
            ptr: ResetCommandPool,
            signature: (
                command_pool: CommandPool,
                flags: CommandPoolResetFlags,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_allocate_command_buffers,
            method_name: allocate_command_buffers,
            ptr: AllocateCommandBuffers,
            signature: (
                p_allocate_info: *const CommandBufferAllocateInfo,
                p_command_buffers: *mut CommandBuffer,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_free_command_buffers,
            method_name: free_command_buffers,
            ptr: FreeCommandBuffers,
            signature: (
                command_pool: CommandPool,
                command_buffer_count: u32,
                p_command_buffers: *const CommandBuffer,
            ),
            takes_handle: true,
        },
        {
            name: pfn_begin_command_buffer,
            method_name: begin_command_buffer,
            ptr: BeginCommandBuffer,
            signature: (
                command_buffer: CommandBuffer,
                p_begin_info: *const CommandBufferBeginInfo,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_end_command_buffer,
            method_name: end_command_buffer,
            ptr: EndCommandBuffer,
            signature: (
                command_buffer: CommandBuffer,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_reset_command_buffer,
            method_name: reset_command_buffer,
            ptr: ResetCommandBuffer,
            signature: (
                command_buffer: CommandBuffer,
                flags: CommandBufferResetFlags,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_cmd_bind_pipeline,
            method_name: cmd_bind_pipeline,
            ptr: CmdBindPipeline,
            signature: (
                command_buffer: CommandBuffer,
                pipeline_bind_point: PipelineBindPoint,
                pipeline: Pipeline,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_set_viewport,
            method_name: cmd_set_viewport,
            ptr: CmdSetViewport,
            signature: (
                command_buffer: CommandBuffer,
                first_viewport: u32,
                viewport_count: u32,
                p_viewports: *const Viewport,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_set_scissor,
            method_name: cmd_set_scissor,
            ptr: CmdSetScissor,
            signature: (
                command_buffer: CommandBuffer,
                first_scissor: u32,
                scissor_count: u32,
                p_scissors: *const Rect2D,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_set_line_width,
            method_name: cmd_set_line_width,
            ptr: CmdSetLineWidth,
            signature: (
                command_buffer: CommandBuffer,
                line_width: c_float,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_set_depth_bias,
            method_name: cmd_set_depth_bias,
            ptr: CmdSetDepthBias,
            signature: (
                command_buffer: CommandBuffer,
                depth_bias_constant_factor: c_float,
                depth_bias_clamp: c_float,
                depth_bias_slope_factor: c_float,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_set_blend_constants,
            method_name: cmd_set_blend_constants,
            ptr: CmdSetBlendConstants,
            signature: (
                command_buffer: CommandBuffer,
                blend_constants: [c_float; 4],
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_set_depth_bounds,
            method_name: cmd_set_depth_bounds,
            ptr: CmdSetDepthBounds,
            signature: (
                command_buffer: CommandBuffer,
                min_depth_bounds: c_float,
                max_depth_bounds: c_float,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_set_stencil_compare_mask,
            method_name: cmd_set_stencil_compare_mask,
            ptr: CmdSetStencilCompareMask,
            signature: (
                command_buffer: CommandBuffer,
                face_mask: StencilFaceFlags,
                compare_mask: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_set_stencil_write_mask,
            method_name: cmd_set_stencil_write_mask,
            ptr: CmdSetStencilWriteMask,
            signature: (
                command_buffer: CommandBuffer,
                face_mask: StencilFaceFlags,
                write_mask: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_set_stencil_reference,
            method_name: cmd_set_stencil_reference,
            ptr: CmdSetStencilReference,
            signature: (
                command_buffer: CommandBuffer,
                face_mask: StencilFaceFlags,
                reference: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_bind_descriptor_sets,
            method_name: cmd_bind_descriptor_sets,
            ptr: CmdBindDescriptorSets,
            signature: (
                command_buffer: CommandBuffer,
                pipeline_bind_point: PipelineBindPoint,
                layout: PipelineLayout,
                first_set: u32,
                descriptor_set_count: u32,
                p_descriptor_sets: *const DescriptorSet,
                dynamic_offset_count: u32,
                p_dynamic_offsets: *const u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_bind_index_buffer,
            method_name: cmd_bind_index_buffer,
            ptr: CmdBindIndexBuffer,
            signature: (
                command_buffer: CommandBuffer,
                buffer: Buffer,
                offset: DeviceSize,
                index_type: IndexType,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_bind_vertex_buffers,
            method_name: cmd_bind_vertex_buffers,
            ptr: CmdBindVertexBuffers,
            signature: (
                command_buffer: CommandBuffer,
                first_binding: u32,
                binding_count: u32,
                p_buffers: *const Buffer,
                p_offsets: *const DeviceSize,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_draw,
            method_name: cmd_draw,
            ptr: CmdDraw,
            signature: (
                command_buffer: CommandBuffer,
                vertex_count: u32,
                instance_count: u32,
                first_vertex: u32,
                first_instance: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_draw_indexed,
            method_name: cmd_draw_indexed,
            ptr: CmdDrawIndexed,
            signature: (
                command_buffer: CommandBuffer,
                index_count: u32,
                instance_count: u32,
                first_index: u32,
                vertex_offset: i32,
                first_instance: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_draw_indirect,
            method_name: cmd_draw_indirect,
            ptr: CmdDrawIndirect,
            signature: (
                command_buffer: CommandBuffer,
                buffer: Buffer,
                offset: DeviceSize,
                draw_count: u32,
                stride: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_draw_indexed_indirect,
            method_name: cmd_draw_indexed_indirect,
            ptr: CmdDrawIndexedIndirect,
            signature: (
                command_buffer: CommandBuffer,
                buffer: Buffer,
                offset: DeviceSize,
                draw_count: u32,
                stride: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_dispatch,
            method_name: cmd_dispatch,
            ptr: CmdDispatch,
            signature: (
                command_buffer: CommandBuffer,
                group_count_x: u32,
                group_count_y: u32,
                group_count_z: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_dispatch_indirect,
            method_name: cmd_dispatch_indirect,
            ptr: CmdDispatchIndirect,
            signature: (
                command_buffer: CommandBuffer,
                buffer: Buffer,
                offset: DeviceSize,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_copy_buffer,
            method_name: cmd_copy_buffer,
            ptr: CmdCopyBuffer,
            signature: (
                command_buffer: CommandBuffer,
                src_buffer: Buffer,
                dst_buffer: Buffer,
                region_count: u32,
                p_regions: *const BufferCopy,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_copy_image,
            method_name: cmd_copy_image,
            ptr: CmdCopyImage,
            signature: (
                command_buffer: CommandBuffer,
                src_image: Image,
                src_image_layout: ImageLayout,
                dst_image: Image,
                dst_image_layout: ImageLayout,
                region_count: u32,
                p_regions: *const ImageCopy,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_blit_image,
            method_name: cmd_blit_image,
            ptr: CmdBlitImage,
            signature: (
                command_buffer: CommandBuffer,
                src_image: Image,
                src_image_layout: ImageLayout,
                dst_image: Image,
                dst_image_layout: ImageLayout,
                region_count: u32,
                p_regions: *const ImageBlit,
                filter: Filter,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_copy_buffer_to_image,
            method_name: cmd_copy_buffer_to_image,
            ptr: CmdCopyBufferToImage,
            signature: (
                command_buffer: CommandBuffer,
                src_buffer: Buffer,
                dst_image: Image,
                dst_image_layout: ImageLayout,
                region_count: u32,
                p_regions: *const BufferImageCopy,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_copy_image_to_buffer,
            method_name: cmd_copy_image_to_buffer,
            ptr: CmdCopyImageToBuffer,
            signature: (
                command_buffer: CommandBuffer,
                src_image: Image,
                src_image_layout: ImageLayout,
                dst_buffer: Buffer,
                region_count: u32,
                p_regions: *const BufferImageCopy,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_update_buffer,
            method_name: cmd_update_buffer,
            ptr: CmdUpdateBuffer,
            signature: (
                command_buffer: CommandBuffer,
                dst_buffer: Buffer,
                dst_offset: DeviceSize,
                data_size: DeviceSize,
                p_data: *const c_void,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_fill_buffer,
            method_name: cmd_fill_buffer,
            ptr: CmdFillBuffer,
            signature: (
                command_buffer: CommandBuffer,
                dst_buffer: Buffer,
                dst_offset: DeviceSize,
                size: DeviceSize,
                data: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_clear_color_image,
            method_name: cmd_clear_color_image,
            ptr: CmdClearColorImage,
            signature: (
                command_buffer: CommandBuffer,
                image: Image,
                image_layout: ImageLayout,
                p_color: *const ClearColorValue,
                range_count: u32,
                p_ranges: *const ImageSubresourceRange,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_clear_depth_stencil_image,
            method_name: cmd_clear_depth_stencil_image,
            ptr: CmdClearDepthStencilImage,
            signature: (
                command_buffer: CommandBuffer,
                image: Image,
                image_layout: ImageLayout,
                p_depth_stencil: *const ClearDepthStencilValue,
                range_count: u32,
                p_ranges: *const ImageSubresourceRange,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_clear_attachments,
            method_name: cmd_clear_attachments,
            ptr: CmdClearAttachments,
            signature: (
                command_buffer: CommandBuffer,
                attachment_count: u32,
                p_attachments: *const ClearAttachment,
                rect_count: u32,
                p_rects: *const ClearRect,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_resolve_image,
            method_name: cmd_resolve_image,
            ptr: CmdResolveImage,
            signature: (
                command_buffer: CommandBuffer,
                src_image: Image,
                src_image_layout: ImageLayout,
                dst_image: Image,
                dst_image_layout: ImageLayout,
                region_count: u32,
                p_regions: *const ImageResolve,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_set_event,
            method_name: cmd_set_event,
            ptr: CmdSetEvent,
            signature: (
                command_buffer: CommandBuffer,
                event: Event,
                stage_mask: PipelineStageFlags,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_reset_event,
            method_name: cmd_reset_event,
            ptr: CmdResetEvent,
            signature: (
                command_buffer: CommandBuffer,
                event: Event,
                stage_mask: PipelineStageFlags,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_wait_events,
            method_name: cmd_wait_events,
            ptr: CmdWaitEvents,
            signature: (
                command_buffer: CommandBuffer,
                event_count: u32,
                p_events: *const Event,
                src_stage_mask: PipelineStageFlags,
                dst_stage_mask: PipelineStageFlags,
                memory_barrier_count: u32,
                p_memory_barriers: *const MemoryBarrier,
                buffer_memory_barrier_count: u32,
                p_buffer_memory_barriers: *const BufferMemoryBarrier,
                image_memory_barrier_count: u32,
                p_image_memory_barriers: *const ImageMemoryBarrier,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_pipeline_barrier,
            method_name: cmd_pipeline_barrier,
            ptr: CmdPipelineBarrier,
            signature: (
                command_buffer: CommandBuffer,
                src_stage_mask: PipelineStageFlags,
                dst_stage_mask: PipelineStageFlags,
                dependency_flags: DependencyFlags,
                memory_barrier_count: u32,
                p_memory_barriers: *const MemoryBarrier,
                buffer_memory_barrier_count: u32,
                p_buffer_memory_barriers: *const BufferMemoryBarrier,
                image_memory_barrier_count: u32,
                p_image_memory_barriers: *const ImageMemoryBarrier,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_begin_query,
            method_name: cmd_begin_query,
            ptr: CmdBeginQuery,
            signature: (
                command_buffer: CommandBuffer,
                query_pool: QueryPool,
                query: u32,
                flags: QueryControlFlags,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_end_query,
            method_name: cmd_end_query,
            ptr: CmdEndQuery,
            signature: (
                command_buffer: CommandBuffer,
                query_pool: QueryPool,
                query: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_begin_conditional_rendering_ext,
            method_name: cmd_begin_conditional_rendering_ext,
            ptr: CmdBeginConditionalRenderingEXT,
            signature: (
                command_buffer: CommandBuffer,
                p_conditional_rendering_begin: *const ConditionalRenderingBeginInfoEXT,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_end_conditional_rendering_ext,
            method_name: cmd_end_conditional_rendering_ext,
            ptr: CmdEndConditionalRenderingEXT,
            signature: (
                command_buffer: CommandBuffer,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_reset_query_pool,
            method_name: cmd_reset_query_pool,
            ptr: CmdResetQueryPool,
            signature: (
                command_buffer: CommandBuffer,
                query_pool: QueryPool,
                first_query: u32,
                query_count: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_write_timestamp,
            method_name: cmd_write_timestamp,
            ptr: CmdWriteTimestamp,
            signature: (
                command_buffer: CommandBuffer,
                pipeline_stage: PipelineStageFlagBits,
                query_pool: QueryPool,
                query: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_copy_query_pool_results,
            method_name: cmd_copy_query_pool_results,
            ptr: CmdCopyQueryPoolResults,
            signature: (
                command_buffer: CommandBuffer,
                query_pool: QueryPool,
                first_query: u32,
                query_count: u32,
                dst_buffer: Buffer,
                dst_offset: DeviceSize,
                stride: DeviceSize,
                flags: QueryResultFlags,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_push_constants,
            method_name: cmd_push_constants,
            ptr: CmdPushConstants,
            signature: (
                command_buffer: CommandBuffer,
                layout: PipelineLayout,
                stage_flags: ShaderStageFlags,
                offset: u32,
                size: u32,
                p_values: *const c_void,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_begin_render_pass,
            method_name: cmd_begin_render_pass,
            ptr: CmdBeginRenderPass,
            signature: (
                command_buffer: CommandBuffer,
                p_render_pass_begin: *const RenderPassBeginInfo,
                contents: SubpassContents,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_next_subpass,
            method_name: cmd_next_subpass,
            ptr: CmdNextSubpass,
            signature: (
                command_buffer: CommandBuffer,
                contents: SubpassContents,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_end_render_pass,
            method_name: cmd_end_render_pass,
            ptr: CmdEndRenderPass,
            signature: (
                command_buffer: CommandBuffer,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_execute_commands,
            method_name: cmd_execute_commands,
            ptr: CmdExecuteCommands,
            signature: (
                command_buffer: CommandBuffer,
                command_buffer_count: u32,
                p_command_buffers: *const CommandBuffer,
            ),
            takes_handle: false,
        },
        {
            name: pfn_create_shared_swapchains_khr,
            method_name: create_shared_swapchains_khr,
            ptr: CreateSharedSwapchainsKHR,
            signature: (
                swapchain_count: u32,
                p_create_infos: *const SwapchainCreateInfoKHR,
                p_allocator: *const AllocationCallbacks,
                p_swapchains: *mut SwapchainKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_create_swapchain_khr,
            method_name: create_swapchain_khr,
            ptr: CreateSwapchainKHR,
            signature: (
                p_create_info: *const SwapchainCreateInfoKHR,
                p_allocator: *const AllocationCallbacks,
                p_swapchain: *mut SwapchainKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_swapchain_khr,
            method_name: destroy_swapchain_khr,
            ptr: DestroySwapchainKHR,
            signature: (
                swapchain: SwapchainKHR,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_swapchain_images_khr,
            method_name: get_swapchain_images_khr,
            ptr: GetSwapchainImagesKHR,
            signature: (
                swapchain: SwapchainKHR,
                p_swapchain_image_count: *mut u32,
                p_swapchain_images: *mut Image,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_acquire_next_image_khr,
            method_name: acquire_next_image_khr,
            ptr: AcquireNextImageKHR,
            signature: (
                swapchain: SwapchainKHR,
                timeout: u64,
                semaphore: Semaphore,
                fence: Fence,
                p_image_index: *mut u32,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_queue_present_khr,
            method_name: queue_present_khr,
            ptr: QueuePresentKHR,
            signature: (
                queue: Queue,
                p_present_info: *const PresentInfoKHR,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_debug_marker_set_object_name_ext,
            method_name: debug_marker_set_object_name_ext,
            ptr: DebugMarkerSetObjectNameEXT,
            signature: (
                p_name_info: *const DebugMarkerObjectNameInfoEXT,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_debug_marker_set_object_tag_ext,
            method_name: debug_marker_set_object_tag_ext,
            ptr: DebugMarkerSetObjectTagEXT,
            signature: (
                p_tag_info: *const DebugMarkerObjectTagInfoEXT,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_cmd_debug_marker_begin_ext,
            method_name: cmd_debug_marker_begin_ext,
            ptr: CmdDebugMarkerBeginEXT,
            signature: (
                command_buffer: CommandBuffer,
                p_marker_info: *const DebugMarkerMarkerInfoEXT,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_debug_marker_end_ext,
            method_name: cmd_debug_marker_end_ext,
            ptr: CmdDebugMarkerEndEXT,
            signature: (
                command_buffer: CommandBuffer,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_debug_marker_insert_ext,
            method_name: cmd_debug_marker_insert_ext,
            ptr: CmdDebugMarkerInsertEXT,
            signature: (
                command_buffer: CommandBuffer,
                p_marker_info: *const DebugMarkerMarkerInfoEXT,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_process_commands_nvx,
            method_name: cmd_process_commands_nvx,
            ptr: CmdProcessCommandsNVX,
            signature: (
                command_buffer: CommandBuffer,
                p_process_commands_info: *const CmdProcessCommandsInfoNVX,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_reserve_space_for_commands_nvx,
            method_name: cmd_reserve_space_for_commands_nvx,
            ptr: CmdReserveSpaceForCommandsNVX,
            signature: (
                command_buffer: CommandBuffer,
                p_reserve_space_info: *const CmdReserveSpaceForCommandsInfoNVX,
            ),
            takes_handle: false,
        },
        {
            name: pfn_create_indirect_commands_layout_nvx,
            method_name: create_indirect_commands_layout_nvx,
            ptr: CreateIndirectCommandsLayoutNVX,
            signature: (
                p_create_info: *const IndirectCommandsLayoutCreateInfoNVX,
                p_allocator: *const AllocationCallbacks,
                p_indirect_commands_layout: *mut IndirectCommandsLayoutNVX,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_indirect_commands_layout_nvx,
            method_name: destroy_indirect_commands_layout_nvx,
            ptr: DestroyIndirectCommandsLayoutNVX,
            signature: (
                indirect_commands_layout: IndirectCommandsLayoutNVX,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_create_object_table_nvx,
            method_name: create_object_table_nvx,
            ptr: CreateObjectTableNVX,
            signature: (
                p_create_info: *const ObjectTableCreateInfoNVX,
                p_allocator: *const AllocationCallbacks,
                p_object_table: *mut ObjectTableNVX,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_object_table_nvx,
            method_name: destroy_object_table_nvx,
            ptr: DestroyObjectTableNVX,
            signature: (
                object_table: ObjectTableNVX,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_register_objects_nvx,
            method_name: register_objects_nvx,
            ptr: RegisterObjectsNVX,
            signature: (
                object_table: ObjectTableNVX,
                object_count: u32,
                pp_object_table_entries: *const *const ObjectTableEntryNVX,
                p_object_indices: *const u32,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_unregister_objects_nvx,
            method_name: unregister_objects_nvx,
            ptr: UnregisterObjectsNVX,
            signature: (
                object_table: ObjectTableNVX,
                object_count: u32,
                p_object_entry_types: *const ObjectEntryTypeNVX,
                p_object_indices: *const u32,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_cmd_push_descriptor_set_khr,
            method_name: cmd_push_descriptor_set_khr,
            ptr: CmdPushDescriptorSetKHR,
            signature: (
                command_buffer: CommandBuffer,
                pipeline_bind_point: PipelineBindPoint,
                layout: PipelineLayout,
                set: u32,
                descriptor_write_count: u32,
                p_descriptor_writes: *const WriteDescriptorSet,
            ),
            takes_handle: false,
        },
        {
            name: pfn_trim_command_pool,
            method_name: trim_command_pool,
            ptr: TrimCommandPool,
            signature: (
                command_pool: CommandPool,
                flags: CommandPoolTrimFlags,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_memory_fd_khr,
            method_name: get_memory_fd_khr,
            ptr: GetMemoryFdKHR,
            signature: (
                p_get_fd_info: *const MemoryGetFdInfoKHR,
                p_fd: *mut c_int,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_memory_fd_properties_khr,
            method_name: get_memory_fd_properties_khr,
            ptr: GetMemoryFdPropertiesKHR,
            signature: (
                handle_type: ExternalMemoryHandleTypeFlagBits,
                fd: c_int,
                p_memory_fd_properties: *mut MemoryFdPropertiesKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_semaphore_fd_khr,
            method_name: get_semaphore_fd_khr,
            ptr: GetSemaphoreFdKHR,
            signature: (
                p_get_fd_info: *const SemaphoreGetFdInfoKHR,
                p_fd: *mut c_int,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_import_semaphore_fd_khr,
            method_name: import_semaphore_fd_khr,
            ptr: ImportSemaphoreFdKHR,
            signature: (
                p_import_semaphore_fd_info: *const ImportSemaphoreFdInfoKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_fence_fd_khr,
            method_name: get_fence_fd_khr,
            ptr: GetFenceFdKHR,
            signature: (
                p_get_fd_info: *const FenceGetFdInfoKHR,
                p_fd: *mut c_int,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_import_fence_fd_khr,
            method_name: import_fence_fd_khr,
            ptr: ImportFenceFdKHR,
            signature: (
                p_import_fence_fd_info: *const ImportFenceFdInfoKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_display_power_control_ext,
            method_name: display_power_control_ext,
            ptr: DisplayPowerControlEXT,
            signature: (
                display: DisplayKHR,
                p_display_power_info: *const DisplayPowerInfoEXT,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_register_device_event_ext,
            method_name: register_device_event_ext,
            ptr: RegisterDeviceEventEXT,
            signature: (
                p_device_event_info: *const DeviceEventInfoEXT,
                p_allocator: *const AllocationCallbacks,
                p_fence: *mut Fence,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_register_display_event_ext,
            method_name: register_display_event_ext,
            ptr: RegisterDisplayEventEXT,
            signature: (
                display: DisplayKHR,
                p_display_event_info: *const DisplayEventInfoEXT,
                p_allocator: *const AllocationCallbacks,
                p_fence: *mut Fence,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_swapchain_counter_ext,
            method_name: get_swapchain_counter_ext,
            ptr: GetSwapchainCounterEXT,
            signature: (
                swapchain: SwapchainKHR,
                counter: SurfaceCounterFlagBitsEXT,
                p_counter_value: *mut u64,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_device_group_peer_memory_features,
            method_name: get_device_group_peer_memory_features,
            ptr: GetDeviceGroupPeerMemoryFeatures,
            signature: (
                heap_index: u32,
                local_device_index: u32,
                remote_device_index: u32,
                p_peer_memory_features: *mut PeerMemoryFeatureFlags,
            ),
            takes_handle: true,
        },
        {
            name: pfn_bind_buffer_memory_2,
            method_name: bind_buffer_memory_2,
            ptr: BindBufferMemory2,
            signature: (
                bind_info_count: u32,
                p_bind_infos: *const BindBufferMemoryInfo,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_bind_image_memory_2,
            method_name: bind_image_memory_2,
            ptr: BindImageMemory2,
            signature: (
                bind_info_count: u32,
                p_bind_infos: *const BindImageMemoryInfo,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_cmd_set_device_mask,
            method_name: cmd_set_device_mask,
            ptr: CmdSetDeviceMask,
            signature: (
                command_buffer: CommandBuffer,
                device_mask: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_device_group_present_capabilities_khr,
            method_name: get_device_group_present_capabilities_khr,
            ptr: GetDeviceGroupPresentCapabilitiesKHR,
            signature: (
                p_device_group_present_capabilities: *mut DeviceGroupPresentCapabilitiesKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_device_group_surface_present_modes_khr,
            method_name: get_device_group_surface_present_modes_khr,
            ptr: GetDeviceGroupSurfacePresentModesKHR,
            signature: (
                surface: SurfaceKHR,
                p_modes: *mut DeviceGroupPresentModeFlagsKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_acquire_next_image_2_khr,
            method_name: acquire_next_image_2_khr,
            ptr: AcquireNextImage2KHR,
            signature: (
                p_acquire_info: *const AcquireNextImageInfoKHR,
                p_image_index: *mut u32,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_cmd_dispatch_base,
            method_name: cmd_dispatch_base,
            ptr: CmdDispatchBase,
            signature: (
                command_buffer: CommandBuffer,
                base_group_x: u32,
                base_group_y: u32,
                base_group_z: u32,
                group_count_x: u32,
                group_count_y: u32,
                group_count_z: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_create_descriptor_update_template,
            method_name: create_descriptor_update_template,
            ptr: CreateDescriptorUpdateTemplate,
            signature: (
                p_create_info: *const DescriptorUpdateTemplateCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_descriptor_update_template: *mut DescriptorUpdateTemplate,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_descriptor_update_template,
            method_name: destroy_descriptor_update_template,
            ptr: DestroyDescriptorUpdateTemplate,
            signature: (
                descriptor_update_template: DescriptorUpdateTemplate,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_update_descriptor_set_with_template,
            method_name: update_descriptor_set_with_template,
            ptr: UpdateDescriptorSetWithTemplate,
            signature: (
                descriptor_set: DescriptorSet,
                descriptor_update_template: DescriptorUpdateTemplate,
                p_data: *const c_void,
            ),
            takes_handle: true,
        },
        {
            name: pfn_cmd_push_descriptor_set_with_template_khr,
            method_name: cmd_push_descriptor_set_with_template_khr,
            ptr: CmdPushDescriptorSetWithTemplateKHR,
            signature: (
                command_buffer: CommandBuffer,
                descriptor_update_template: DescriptorUpdateTemplate,
                layout: PipelineLayout,
                set: u32,
                p_data: *const c_void,
            ),
            takes_handle: false,
        },
        {
            name: pfn_set_hdr_metadata_ext,
            method_name: set_hdr_metadata_ext,
            ptr: SetHdrMetadataEXT,
            signature: (
                swapchain_count: u32,
                p_swapchains: *const SwapchainKHR,
                p_metadata: *const HdrMetadataEXT,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_swapchain_status_khr,
            method_name: get_swapchain_status_khr,
            ptr: GetSwapchainStatusKHR,
            signature: (
                swapchain: SwapchainKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_refresh_cycle_duration_google,
            method_name: get_refresh_cycle_duration_google,
            ptr: GetRefreshCycleDurationGOOGLE,
            signature: (
                swapchain: SwapchainKHR,
                p_display_timing_properties: *mut RefreshCycleDurationGOOGLE,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_past_presentation_timing_google,
            method_name: get_past_presentation_timing_google,
            ptr: GetPastPresentationTimingGOOGLE,
            signature: (
                swapchain: SwapchainKHR,
                p_presentation_timing_count: *mut u32,
                p_presentation_timings: *mut PastPresentationTimingGOOGLE,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_cmd_set_viewport_w_scaling_nv,
            method_name: cmd_set_viewport_w_scaling_nv,
            ptr: CmdSetViewportWScalingNV,
            signature: (
                command_buffer: CommandBuffer,
                first_viewport: u32,
                viewport_count: u32,
                p_viewport_w_scalings: *const ViewportWScalingNV,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_set_discard_rectangle_ext,
            method_name: cmd_set_discard_rectangle_ext,
            ptr: CmdSetDiscardRectangleEXT,
            signature: (
                command_buffer: CommandBuffer,
                first_discard_rectangle: u32,
                discard_rectangle_count: u32,
                p_discard_rectangles: *const Rect2D,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_set_sample_locations_ext,
            method_name: cmd_set_sample_locations_ext,
            ptr: CmdSetSampleLocationsEXT,
            signature: (
                command_buffer: CommandBuffer,
                p_sample_locations_info: *const SampleLocationsInfoEXT,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_buffer_memory_requirements_2,
            method_name: get_buffer_memory_requirements_2,
            ptr: GetBufferMemoryRequirements2,
            signature: (
                p_info: *const BufferMemoryRequirementsInfo2,
                p_memory_requirements: *mut MemoryRequirements2,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_image_memory_requirements_2,
            method_name: get_image_memory_requirements_2,
            ptr: GetImageMemoryRequirements2,
            signature: (
                p_info: *const ImageMemoryRequirementsInfo2,
                p_memory_requirements: *mut MemoryRequirements2,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_image_sparse_memory_requirements_2,
            method_name: get_image_sparse_memory_requirements_2,
            ptr: GetImageSparseMemoryRequirements2,
            signature: (
                p_info: *const ImageSparseMemoryRequirementsInfo2,
                p_sparse_memory_requirement_count: *mut u32,
                p_sparse_memory_requirements: *mut SparseImageMemoryRequirements2,
            ),
            takes_handle: true,
        },
        {
            name: pfn_create_sampler_ycbcr_conversion,
            method_name: create_sampler_ycbcr_conversion,
            ptr: CreateSamplerYcbcrConversion,
            signature: (
                p_create_info: *const SamplerYcbcrConversionCreateInfo,
                p_allocator: *const AllocationCallbacks,
                p_ycbcr_conversion: *mut SamplerYcbcrConversion,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_sampler_ycbcr_conversion,
            method_name: destroy_sampler_ycbcr_conversion,
            ptr: DestroySamplerYcbcrConversion,
            signature: (
                ycbcr_conversion: SamplerYcbcrConversion,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_device_queue_2,
            method_name: get_device_queue_2,
            ptr: GetDeviceQueue2,
            signature: (
                p_queue_info: *const DeviceQueueInfo2,
                p_queue: *mut Queue,
            ),
            takes_handle: true,
        },
        {
            name: pfn_create_validation_cache_ext,
            method_name: create_validation_cache_ext,
            ptr: CreateValidationCacheEXT,
            signature: (
                p_create_info: *const ValidationCacheCreateInfoEXT,
                p_allocator: *const AllocationCallbacks,
                p_validation_cache: *mut ValidationCacheEXT,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_validation_cache_ext,
            method_name: destroy_validation_cache_ext,
            ptr: DestroyValidationCacheEXT,
            signature: (
                validation_cache: ValidationCacheEXT,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_validation_cache_data_ext,
            method_name: get_validation_cache_data_ext,
            ptr: GetValidationCacheDataEXT,
            signature: (
                validation_cache: ValidationCacheEXT,
                p_data_size: *mut usize,
                p_data: *mut c_void,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_merge_validation_caches_ext,
            method_name: merge_validation_caches_ext,
            ptr: MergeValidationCachesEXT,
            signature: (
                dst_cache: ValidationCacheEXT,
                src_cache_count: u32,
                p_src_caches: *const ValidationCacheEXT,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_descriptor_set_layout_support,
            method_name: get_descriptor_set_layout_support,
            ptr: GetDescriptorSetLayoutSupport,
            signature: (
                p_create_info: *const DescriptorSetLayoutCreateInfo,
                p_support: *mut DescriptorSetLayoutSupport,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_swapchain_gralloc_usage_android,
            method_name: get_swapchain_gralloc_usage_android,
            ptr: GetSwapchainGrallocUsageANDROID,
            signature: (
                format: Format,
                image_usage: ImageUsageFlags,
                gralloc_usage: *mut c_int,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_swapchain_gralloc_usage_2_android,
            method_name: get_swapchain_gralloc_usage_2_android,
            ptr: GetSwapchainGrallocUsage2ANDROID,
            signature: (
                format: Format,
                image_usage: ImageUsageFlags,
                swapchain_image_usage: SwapchainImageUsageFlagsANDROID,
                gralloc_consumer_usage: *mut u64,
                gralloc_producer_usage: *mut u64,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_acquire_image_android,
            method_name: acquire_image_android,
            ptr: AcquireImageANDROID,
            signature: (
                image: Image,
                native_fence_fd: c_int,
                semaphore: Semaphore,
                fence: Fence,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_queue_signal_release_image_android,
            method_name: queue_signal_release_image_android,
            ptr: QueueSignalReleaseImageANDROID,
            signature: (
                queue: Queue,
                wait_semaphore_count: u32,
                p_wait_semaphores: *const Semaphore,
                image: Image,
                p_native_fence_fd: *mut c_int,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_shader_info_amd,
            method_name: get_shader_info_amd,
            ptr: GetShaderInfoAMD,
            signature: (
                pipeline: Pipeline,
                shader_stage: ShaderStageFlagBits,
                info_type: ShaderInfoTypeAMD,
                p_info_size: *mut usize,
                p_info: *mut c_void,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_set_local_dimming_amd,
            method_name: set_local_dimming_amd,
            ptr: SetLocalDimmingAMD,
            signature: (
                swap_chain: SwapchainKHR,
                local_dimming_enable: Bool32,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_calibrated_timestamps_ext,
            method_name: get_calibrated_timestamps_ext,
            ptr: GetCalibratedTimestampsEXT,
            signature: (
                timestamp_count: u32,
                p_timestamp_infos: *const CalibratedTimestampInfoEXT,
                p_timestamps: *mut u64,
                p_max_deviation: *mut u64,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_set_debug_utils_object_name_ext,
            method_name: set_debug_utils_object_name_ext,
            ptr: SetDebugUtilsObjectNameEXT,
            signature: (
                p_name_info: *const DebugUtilsObjectNameInfoEXT,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_set_debug_utils_object_tag_ext,
            method_name: set_debug_utils_object_tag_ext,
            ptr: SetDebugUtilsObjectTagEXT,
            signature: (
                p_tag_info: *const DebugUtilsObjectTagInfoEXT,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_queue_begin_debug_utils_label_ext,
            method_name: queue_begin_debug_utils_label_ext,
            ptr: QueueBeginDebugUtilsLabelEXT,
            signature: (
                queue: Queue,
                p_label_info: *const DebugUtilsLabelEXT,
            ),
            takes_handle: false,
        },
        {
            name: pfn_queue_end_debug_utils_label_ext,
            method_name: queue_end_debug_utils_label_ext,
            ptr: QueueEndDebugUtilsLabelEXT,
            signature: (
                queue: Queue,
            ),
            takes_handle: false,
        },
        {
            name: pfn_queue_insert_debug_utils_label_ext,
            method_name: queue_insert_debug_utils_label_ext,
            ptr: QueueInsertDebugUtilsLabelEXT,
            signature: (
                queue: Queue,
                p_label_info: *const DebugUtilsLabelEXT,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_begin_debug_utils_label_ext,
            method_name: cmd_begin_debug_utils_label_ext,
            ptr: CmdBeginDebugUtilsLabelEXT,
            signature: (
                command_buffer: CommandBuffer,
                p_label_info: *const DebugUtilsLabelEXT,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_end_debug_utils_label_ext,
            method_name: cmd_end_debug_utils_label_ext,
            ptr: CmdEndDebugUtilsLabelEXT,
            signature: (
                command_buffer: CommandBuffer,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_insert_debug_utils_label_ext,
            method_name: cmd_insert_debug_utils_label_ext,
            ptr: CmdInsertDebugUtilsLabelEXT,
            signature: (
                command_buffer: CommandBuffer,
                p_label_info: *const DebugUtilsLabelEXT,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_memory_host_pointer_properties_ext,
            method_name: get_memory_host_pointer_properties_ext,
            ptr: GetMemoryHostPointerPropertiesEXT,
            signature: (
                handle_type: ExternalMemoryHandleTypeFlagBits,
                p_host_pointer: *const c_void,
                p_memory_host_pointer_properties: *mut MemoryHostPointerPropertiesEXT,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_cmd_write_buffer_marker_amd,
            method_name: cmd_write_buffer_marker_amd,
            ptr: CmdWriteBufferMarkerAMD,
            signature: (
                command_buffer: CommandBuffer,
                pipeline_stage: PipelineStageFlagBits,
                dst_buffer: Buffer,
                dst_offset: DeviceSize,
                marker: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_create_render_pass_2,
            method_name: create_render_pass_2,
            ptr: CreateRenderPass2,
            signature: (
                p_create_info: *const RenderPassCreateInfo2,
                p_allocator: *const AllocationCallbacks,
                p_render_pass: *mut RenderPass,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_cmd_begin_render_pass_2,
            method_name: cmd_begin_render_pass_2,
            ptr: CmdBeginRenderPass2,
            signature: (
                command_buffer: CommandBuffer,
                p_render_pass_begin: *const RenderPassBeginInfo,
                p_subpass_begin_info: *const SubpassBeginInfo,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_next_subpass_2,
            method_name: cmd_next_subpass_2,
            ptr: CmdNextSubpass2,
            signature: (
                command_buffer: CommandBuffer,
                p_subpass_begin_info: *const SubpassBeginInfo,
                p_subpass_end_info: *const SubpassEndInfo,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_end_render_pass_2,
            method_name: cmd_end_render_pass_2,
            ptr: CmdEndRenderPass2,
            signature: (
                command_buffer: CommandBuffer,
                p_subpass_end_info: *const SubpassEndInfo,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_semaphore_counter_value,
            method_name: get_semaphore_counter_value,
            ptr: GetSemaphoreCounterValue,
            signature: (
                semaphore: Semaphore,
                p_value: *mut u64,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_wait_semaphores,
            method_name: wait_semaphores,
            ptr: WaitSemaphores,
            signature: (
                p_wait_info: *const SemaphoreWaitInfo,
                timeout: u64,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_signal_semaphore,
            method_name: signal_semaphore,
            ptr: SignalSemaphore,
            signature: (
                p_signal_info: *const SemaphoreSignalInfo,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_cmd_draw_indirect_count,
            method_name: cmd_draw_indirect_count,
            ptr: CmdDrawIndirectCount,
            signature: (
                command_buffer: CommandBuffer,
                buffer: Buffer,
                offset: DeviceSize,
                count_buffer: Buffer,
                count_buffer_offset: DeviceSize,
                max_draw_count: u32,
                stride: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_draw_indexed_indirect_count,
            method_name: cmd_draw_indexed_indirect_count,
            ptr: CmdDrawIndexedIndirectCount,
            signature: (
                command_buffer: CommandBuffer,
                buffer: Buffer,
                offset: DeviceSize,
                count_buffer: Buffer,
                count_buffer_offset: DeviceSize,
                max_draw_count: u32,
                stride: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_set_checkpoint_nv,
            method_name: cmd_set_checkpoint_nv,
            ptr: CmdSetCheckpointNV,
            signature: (
                command_buffer: CommandBuffer,
                p_checkpoint_marker: *const c_void,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_queue_checkpoint_data_nv,
            method_name: get_queue_checkpoint_data_nv,
            ptr: GetQueueCheckpointDataNV,
            signature: (
                queue: Queue,
                p_checkpoint_data_count: *mut u32,
                p_checkpoint_data: *mut CheckpointDataNV,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_bind_transform_feedback_buffers_ext,
            method_name: cmd_bind_transform_feedback_buffers_ext,
            ptr: CmdBindTransformFeedbackBuffersEXT,
            signature: (
                command_buffer: CommandBuffer,
                first_binding: u32,
                binding_count: u32,
                p_buffers: *const Buffer,
                p_offsets: *const DeviceSize,
                p_sizes: *const DeviceSize,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_begin_transform_feedback_ext,
            method_name: cmd_begin_transform_feedback_ext,
            ptr: CmdBeginTransformFeedbackEXT,
            signature: (
                command_buffer: CommandBuffer,
                first_counter_buffer: u32,
                counter_buffer_count: u32,
                p_counter_buffers: *const Buffer,
                p_counter_buffer_offsets: *const DeviceSize,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_end_transform_feedback_ext,
            method_name: cmd_end_transform_feedback_ext,
            ptr: CmdEndTransformFeedbackEXT,
            signature: (
                command_buffer: CommandBuffer,
                first_counter_buffer: u32,
                counter_buffer_count: u32,
                p_counter_buffers: *const Buffer,
                p_counter_buffer_offsets: *const DeviceSize,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_begin_query_indexed_ext,
            method_name: cmd_begin_query_indexed_ext,
            ptr: CmdBeginQueryIndexedEXT,
            signature: (
                command_buffer: CommandBuffer,
                query_pool: QueryPool,
                query: u32,
                flags: QueryControlFlags,
                index: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_end_query_indexed_ext,
            method_name: cmd_end_query_indexed_ext,
            ptr: CmdEndQueryIndexedEXT,
            signature: (
                command_buffer: CommandBuffer,
                query_pool: QueryPool,
                query: u32,
                index: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_draw_indirect_byte_count_ext,
            method_name: cmd_draw_indirect_byte_count_ext,
            ptr: CmdDrawIndirectByteCountEXT,
            signature: (
                command_buffer: CommandBuffer,
                instance_count: u32,
                first_instance: u32,
                counter_buffer: Buffer,
                counter_buffer_offset: DeviceSize,
                counter_offset: u32,
                vertex_stride: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_set_exclusive_scissor_nv,
            method_name: cmd_set_exclusive_scissor_nv,
            ptr: CmdSetExclusiveScissorNV,
            signature: (
                command_buffer: CommandBuffer,
                first_exclusive_scissor: u32,
                exclusive_scissor_count: u32,
                p_exclusive_scissors: *const Rect2D,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_bind_shading_rate_image_nv,
            method_name: cmd_bind_shading_rate_image_nv,
            ptr: CmdBindShadingRateImageNV,
            signature: (
                command_buffer: CommandBuffer,
                image_view: ImageView,
                image_layout: ImageLayout,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_set_viewport_shading_rate_palette_nv,
            method_name: cmd_set_viewport_shading_rate_palette_nv,
            ptr: CmdSetViewportShadingRatePaletteNV,
            signature: (
                command_buffer: CommandBuffer,
                first_viewport: u32,
                viewport_count: u32,
                p_shading_rate_palettes: *const ShadingRatePaletteNV,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_set_coarse_sample_order_nv,
            method_name: cmd_set_coarse_sample_order_nv,
            ptr: CmdSetCoarseSampleOrderNV,
            signature: (
                command_buffer: CommandBuffer,
                sample_order_type: CoarseSampleOrderTypeNV,
                custom_sample_order_count: u32,
                p_custom_sample_orders: *const CoarseSampleOrderCustomNV,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_draw_mesh_tasks_nv,
            method_name: cmd_draw_mesh_tasks_nv,
            ptr: CmdDrawMeshTasksNV,
            signature: (
                command_buffer: CommandBuffer,
                task_count: u32,
                first_task: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_draw_mesh_tasks_indirect_nv,
            method_name: cmd_draw_mesh_tasks_indirect_nv,
            ptr: CmdDrawMeshTasksIndirectNV,
            signature: (
                command_buffer: CommandBuffer,
                buffer: Buffer,
                offset: DeviceSize,
                draw_count: u32,
                stride: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_draw_mesh_tasks_indirect_count_nv,
            method_name: cmd_draw_mesh_tasks_indirect_count_nv,
            ptr: CmdDrawMeshTasksIndirectCountNV,
            signature: (
                command_buffer: CommandBuffer,
                buffer: Buffer,
                offset: DeviceSize,
                count_buffer: Buffer,
                count_buffer_offset: DeviceSize,
                max_draw_count: u32,
                stride: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_compile_deferred_nv,
            method_name: compile_deferred_nv,
            ptr: CompileDeferredNV,
            signature: (
                pipeline: Pipeline,
                shader: u32,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_create_acceleration_structure_nv,
            method_name: create_acceleration_structure_nv,
            ptr: CreateAccelerationStructureNV,
            signature: (
                p_create_info: *const AccelerationStructureCreateInfoNV,
                p_allocator: *const AllocationCallbacks,
                p_acceleration_structure: *mut AccelerationStructureNV,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_destroy_acceleration_structure_nv,
            method_name: destroy_acceleration_structure_nv,
            ptr: DestroyAccelerationStructureNV,
            signature: (
                acceleration_structure: AccelerationStructureNV,
                p_allocator: *const AllocationCallbacks,
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_acceleration_structure_memory_requirements_nv,
            method_name: get_acceleration_structure_memory_requirements_nv,
            ptr: GetAccelerationStructureMemoryRequirementsNV,
            signature: (
                p_info: *const AccelerationStructureMemoryRequirementsInfoNV,
                p_memory_requirements: *mut MemoryRequirements2KHR,
            ),
            takes_handle: true,
        },
        {
            name: pfn_bind_acceleration_structure_memory_nv,
            method_name: bind_acceleration_structure_memory_nv,
            ptr: BindAccelerationStructureMemoryNV,
            signature: (
                bind_info_count: u32,
                p_bind_infos: *const BindAccelerationStructureMemoryInfoNV,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_cmd_copy_acceleration_structure_nv,
            method_name: cmd_copy_acceleration_structure_nv,
            ptr: CmdCopyAccelerationStructureNV,
            signature: (
                command_buffer: CommandBuffer,
                dst: AccelerationStructureNV,
                src: AccelerationStructureNV,
                mode: CopyAccelerationStructureModeNV,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_write_acceleration_structures_properties_nv,
            method_name: cmd_write_acceleration_structures_properties_nv,
            ptr: CmdWriteAccelerationStructuresPropertiesNV,
            signature: (
                command_buffer: CommandBuffer,
                acceleration_structure_count: u32,
                p_acceleration_structures: *const AccelerationStructureNV,
                query_type: QueryType,
                query_pool: QueryPool,
                first_query: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_build_acceleration_structure_nv,
            method_name: cmd_build_acceleration_structure_nv,
            ptr: CmdBuildAccelerationStructureNV,
            signature: (
                command_buffer: CommandBuffer,
                p_info: *const AccelerationStructureInfoNV,
                instance_data: Buffer,
                instance_offset: DeviceSize,
                update: Bool32,
                dst: AccelerationStructureNV,
                src: AccelerationStructureNV,
                scratch: Buffer,
                scratch_offset: DeviceSize,
            ),
            takes_handle: false,
        },
        {
            name: pfn_cmd_trace_rays_nv,
            method_name: cmd_trace_rays_nv,
            ptr: CmdTraceRaysNV,
            signature: (
                command_buffer: CommandBuffer,
                raygen_shader_binding_table_buffer: Buffer,
                raygen_shader_binding_offset: DeviceSize,
                miss_shader_binding_table_buffer: Buffer,
                miss_shader_binding_offset: DeviceSize,
                miss_shader_binding_stride: DeviceSize,
                hit_shader_binding_table_buffer: Buffer,
                hit_shader_binding_offset: DeviceSize,
                hit_shader_binding_stride: DeviceSize,
                callable_shader_binding_table_buffer: Buffer,
                callable_shader_binding_offset: DeviceSize,
                callable_shader_binding_stride: DeviceSize,
                width: u32,
                height: u32,
                depth: u32,
            ),
            takes_handle: false,
        },
        {
            name: pfn_get_ray_tracing_shader_group_handles_nv,
            method_name: get_ray_tracing_shader_group_handles_nv,
            ptr: GetRayTracingShaderGroupHandlesNV,
            signature: (
                pipeline: Pipeline,
                first_group: u32,
                group_count: u32,
                data_size: usize,
                p_data: *mut c_void,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_acceleration_structure_handle_nv,
            method_name: get_acceleration_structure_handle_nv,
            ptr: GetAccelerationStructureHandleNV,
            signature: (
                acceleration_structure: AccelerationStructureNV,
                data_size: usize,
                p_data: *mut c_void,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_create_ray_tracing_pipelines_nv,
            method_name: create_ray_tracing_pipelines_nv,
            ptr: CreateRayTracingPipelinesNV,
            signature: (
                pipeline_cache: PipelineCache,
                create_info_count: u32,
                p_create_infos: *const RayTracingPipelineCreateInfoNV,
                p_allocator: *const AllocationCallbacks,
                p_pipelines: *mut Pipeline,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_image_view_handle_nvx,
            method_name: get_image_view_handle_nvx,
            ptr: GetImageViewHandleNVX,
            signature: (
                p_info: *const ImageViewHandleInfoNVX,
            ) -> u32,
            takes_handle: true,
        },
        {
            name: pfn_get_device_group_surface_present_modes_2_ext,
            method_name: get_device_group_surface_present_modes_2_ext,
            ptr: GetDeviceGroupSurfacePresentModes2EXT,
            signature: (
                p_surface_info: *const PhysicalDeviceSurfaceInfo2KHR,
                p_modes: *mut DeviceGroupPresentModeFlagsKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_acquire_full_screen_exclusive_mode_ext,
            method_name: acquire_full_screen_exclusive_mode_ext,
            ptr: AcquireFullScreenExclusiveModeEXT,
            signature: (
                swapchain: SwapchainKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_release_full_screen_exclusive_mode_ext,
            method_name: release_full_screen_exclusive_mode_ext,
            ptr: ReleaseFullScreenExclusiveModeEXT,
            signature: (
                swapchain: SwapchainKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_acquire_profiling_lock_khr,
            method_name: acquire_profiling_lock_khr,
            ptr: AcquireProfilingLockKHR,
            signature: (
                p_info: *const AcquireProfilingLockInfoKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_release_profiling_lock_khr,
            method_name: release_profiling_lock_khr,
            ptr: ReleaseProfilingLockKHR,
            signature: (
            ),
            takes_handle: true,
        },
        {
            name: pfn_get_image_drm_format_modifier_properties_ext,
            method_name: get_image_drm_format_modifier_properties_ext,
            ptr: GetImageDrmFormatModifierPropertiesEXT,
            signature: (
                image: Image,
                p_properties: *mut ImageDrmFormatModifierPropertiesEXT,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_buffer_opaque_capture_address,
            method_name: get_buffer_opaque_capture_address,
            ptr: GetBufferOpaqueCaptureAddress,
            signature: (
                p_info: *const BufferDeviceAddressInfo,
            ) -> u64,
            takes_handle: true,
        },
        {
            name: pfn_get_buffer_device_address,
            method_name: get_buffer_device_address,
            ptr: GetBufferDeviceAddress,
            signature: (
                p_info: *const BufferDeviceAddressInfo,
            ) -> DeviceAddress,
            takes_handle: true,
        },
        {
            name: pfn_initialize_performance_api_intel,
            method_name: initialize_performance_api_intel,
            ptr: InitializePerformanceApiINTEL,
            signature: (
                p_initialize_info: *const InitializePerformanceApiInfoINTEL,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_uninitialize_performance_api_intel,
            method_name: uninitialize_performance_api_intel,
            ptr: UninitializePerformanceApiINTEL,
            signature: (
            ),
            takes_handle: true,
        },
        {
            name: pfn_cmd_set_performance_marker_intel,
            method_name: cmd_set_performance_marker_intel,
            ptr: CmdSetPerformanceMarkerINTEL,
            signature: (
                command_buffer: CommandBuffer,
                p_marker_info: *const PerformanceMarkerInfoINTEL,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_cmd_set_performance_stream_marker_intel,
            method_name: cmd_set_performance_stream_marker_intel,
            ptr: CmdSetPerformanceStreamMarkerINTEL,
            signature: (
                command_buffer: CommandBuffer,
                p_marker_info: *const PerformanceStreamMarkerInfoINTEL,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_cmd_set_performance_override_intel,
            method_name: cmd_set_performance_override_intel,
            ptr: CmdSetPerformanceOverrideINTEL,
            signature: (
                command_buffer: CommandBuffer,
                p_override_info: *const PerformanceOverrideInfoINTEL,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_acquire_performance_configuration_intel,
            method_name: acquire_performance_configuration_intel,
            ptr: AcquirePerformanceConfigurationINTEL,
            signature: (
                p_acquire_info: *const PerformanceConfigurationAcquireInfoINTEL,
                p_configuration: *mut PerformanceConfigurationINTEL,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_release_performance_configuration_intel,
            method_name: release_performance_configuration_intel,
            ptr: ReleasePerformanceConfigurationINTEL,
            signature: (
                configuration: PerformanceConfigurationINTEL,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_queue_set_performance_configuration_intel,
            method_name: queue_set_performance_configuration_intel,
            ptr: QueueSetPerformanceConfigurationINTEL,
            signature: (
                queue: Queue,
                configuration: PerformanceConfigurationINTEL,
            ) -> Result,
            takes_handle: false,
        },
        {
            name: pfn_get_performance_parameter_intel,
            method_name: get_performance_parameter_intel,
            ptr: GetPerformanceParameterINTEL,
            signature: (
                parameter: PerformanceParameterTypeINTEL,
                p_value: *mut PerformanceValueINTEL,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_device_memory_opaque_capture_address,
            method_name: get_device_memory_opaque_capture_address,
            ptr: GetDeviceMemoryOpaqueCaptureAddress,
            signature: (
                p_info: *const DeviceMemoryOpaqueCaptureAddressInfo,
            ) -> u64,
            takes_handle: true,
        },
        {
            name: pfn_get_pipeline_executable_properties_khr,
            method_name: get_pipeline_executable_properties_khr,
            ptr: GetPipelineExecutablePropertiesKHR,
            signature: (
                p_pipeline_info: *const PipelineInfoKHR,
                p_executable_count: *mut u32,
                p_properties: *mut PipelineExecutablePropertiesKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_pipeline_executable_statistics_khr,
            method_name: get_pipeline_executable_statistics_khr,
            ptr: GetPipelineExecutableStatisticsKHR,
            signature: (
                p_executable_info: *const PipelineExecutableInfoKHR,
                p_statistic_count: *mut u32,
                p_statistics: *mut PipelineExecutableStatisticKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_get_pipeline_executable_internal_representations_khr,
            method_name: get_pipeline_executable_internal_representations_khr,
            ptr: GetPipelineExecutableInternalRepresentationsKHR,
            signature: (
                p_executable_info: *const PipelineExecutableInfoKHR,
                p_internal_representation_count: *mut u32,
                p_internal_representations: *mut PipelineExecutableInternalRepresentationKHR,
            ) -> Result,
            takes_handle: true,
        },
        {
            name: pfn_cmd_set_line_stipple_ext,
            method_name: cmd_set_line_stipple_ext,
            ptr: CmdSetLineStippleEXT,
            signature: (
                command_buffer: CommandBuffer,
                line_stipple_factor: u32,
                line_stipple_pattern: u16,
            ),
            takes_handle: false,
        },
    ],
}

